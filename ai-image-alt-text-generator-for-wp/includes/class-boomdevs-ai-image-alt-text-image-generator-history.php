<?php

if (!defined('ABSPATH')) {
    exit; // Exit if accessed directly
}

require_once plugin_dir_path(__FILE__) . '../vendor/autoload.php';

if (!class_exists('WP_List_Table')) {
    require_once(ABSPATH . 'wp-admin/includes/class-wp-list-table.php');
}

class AI_Alt_Text_History_Table extends WP_List_Table
{
    private $table_name;

    public function __construct()
    {
        global $wpdb;
        $this->table_name = $wpdb->prefix . 'ai_alt_text_generator_history';

        parent::__construct([
            'singular' => 'AI Alt Text History',
            'plural'   => 'AI Alt Text Histories',
            'ajax'     => false
        ]);
    }

    /**
     * Prepare the items for the table
     */
    public function prepare_items()
    {
        $columns = $this->get_columns();
        $hidden = $this->get_hidden_columns();
        $sortable = $this->get_sortable_columns();
        $per_page = 20;
        $current_page = $this->get_pagenum();
        $total_items = $this->record_count();

        $this->set_pagination_args([
            'total_items' => $total_items,
            'per_page'    => $per_page
        ]);

        $this->_column_headers = [$columns, $hidden, $sortable];
        $this->items = $this->get_history_data($per_page, $current_page);
    }

    /**
     * Get the total number of records
     */
    public function record_count()
    {
        global $wpdb;
        return $wpdb->get_var("SELECT COUNT(*) FROM {$this->table_name}");
    }

    /**
     * Retrieve history data from the database
     */
    public function get_history_data($per_page, $page_number)
    {
        if (!current_user_can('manage_options')) {
            wp_send_json_error(array(
                'message' => 'Permission denied!',
            ));
            return false;
        }
        
        global $wpdb;

        $offset = ($page_number - 1) * $per_page;

        $results = $wpdb->get_results(
            $wpdb->prepare(
                "SELECT h.*, p.guid as image_url, p.post_excerpt as post_excerpt, u.display_name 
                FROM {$this->table_name} h
                LEFT JOIN {$wpdb->posts} p ON h.attachment_id = p.ID
                LEFT JOIN {$wpdb->users} u ON h.gen_by = u.ID
                ORDER BY h.gen_time DESC
                LIMIT %d OFFSET %d",
                $per_page,
                $offset
            ),
            ARRAY_A
        );

        foreach ($results as &$result) {
            $alt_text = get_post_meta($result['attachment_id'], '_wp_attachment_image_alt', true);

            $result['gen_text'] = $alt_text ?: ($result['post_excerpt'] ?: 'No alt text');
        }

        return $results;
    }

    /**
     * Define which columns are hidden
     */
    public function get_hidden_columns()
    {
        return ['id'];
    }

    /**
     * Define the columns that are going to be used in the table
     */
    public function get_columns()
    {
        return [
            'image'         => 'Image',
            'gen_text'      => 'Alt Text',
            'gen_time'      => 'Generated Time',
            'total_count'   => 'Total Generated Count',
            // 'generated_by'  => 'Generated By',
            'actions'       => 'Actions',
        ];
    }

    /**
     * Define which columns are sortable
     */
    public function get_sortable_columns()
    {
        return [
            'gen_time'      => ['gen_time', false],
            'total_count'   => ['total_count', false]
        ];
    }

    /**
     * Column default method
     */
    public function column_default($item, $column_name)
    {
        switch ($column_name) {
            case 'image':
                return $item['image_url']
                    ? sprintf('<img src="%s" style="max-width:80px; max-height:80px;">', esc_url($item['image_url']))
                    : 'Image url not found';

            case 'gen_text':
                return esc_html($item['gen_text']);

            case 'gen_time':
                return esc_html($item['gen_time']);

            case 'total_count':
                return esc_html($item['total_count'] . ' Times');

                // case 'generated_by':
                //     return esc_html($item['display_name'] ?? 'Unknown');

            case 'actions':
                return $this->column_actions($item);

            default:
                return print_r($item, true);
        }
    }

    /**
     * Custom actions column
     */
    public function column_actions($item)
    {
        $actions = [
            'edit' => sprintf(
                '<a href="%s">Edit</a>',
                admin_url('post.php?post=' . $item['attachment_id'] . '&action=edit')
            ),
            'view' => sprintf(
                '<a href="%s" target="_blank">View</a>',
                wp_get_attachment_url($item['attachment_id'])
            )
        ];

        return implode(' | ', $actions);
    }

    /**
     * Render the table
     */
    public function display()
    {
        parent::display();
    }
}
